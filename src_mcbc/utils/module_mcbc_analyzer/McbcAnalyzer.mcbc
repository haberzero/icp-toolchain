```mcbc
// =================================================================
// 文件名: McbcAnalyzer_final.mcbc
// 作者:   Expert Analyst
// 日期:   6/22/2025
// 描述:   本文件使用 MCBC 语言自身定义了其语法分析器。
//         它遵循“解析与验证一体化”的设计哲学，在构建抽象语法树 (AST) 的
//         过程中实时进行语法和结构验证。
// 版本:   2.0 (重构版 - 实现错误恢复)
// =================================================================

module: AstNode // 引入 AST 节点定义
module: SymbolTable // 引入符号表定义
module: LineProcessor // 引入行处理器定义

// -----------------------------------------------------------------
// 核心解析器
// -----------------------------------------------------------------

@ 核心解析器，采用单次遍历、即时验证的设计原则
class McbcAnalyzer:
    description: 负责将 MCBC 源文件文本解析为一颗经过验证的抽象语法树 (AST)。

    var astRoot: RootNode
    description: 存储整棵抽象语法树的根节点，代表被解析的文件本身。

    var symbolTable: SymbolTable
    description: 管理在解析过程中发现的所有符号（类、函数、变量）及其作用域。

    var errorList: 列表[字符串]
    description: 收集在解析过程中发现的所有语法、缩进或语义错误。

    var lineProcessor: LineProcessor
    description: 行处理器，负责对原始文本行进行预处理，提取结构化信息。

    func initialize:
    description: 初始化分析器状态，为一次新的解析做准备。
    behavior:
        创建 self.lineProcessor 的一个新实例
        创建 self.symbolTable 的一个新实例
        将 self.errorList 设置为空列表
        将 self.astRoot 设置为一个新的 RootNode 实例，其缩进为 -1
        将根作用域推入 self.symbolTable

    func parseFile:
    description: 解析器的主要入口点。实现了错误恢复机制，可一次性报告多个错误。
    input: filePath: 字符串
    output: 布尔值 // 若 errorList 为空则返回 true，否则返回 false。
    behavior:
        调用 self.initialize 方法重置分析器状态
        从 filePath 读取所有文本行到一个名为 `sourceLines` 的列表中
        如果读取文件失败:
            向 self.errorList 添加一条 "文件读取失败: {filePath}" 的错误
            返回 false

        var currentNode = self.astRoot
        var lastAddedNode = self.astRoot
        var pendingAnnotation = null

        // 重构: 使用带索引的 while 循环以支持错误恢复时的行跳转。
        var lineIndex = 0
        while lineIndex < sourceLines.length():
            var line = sourceLines[lineIndex]
            var lineNumber = lineIndex + 1
            var processedLine = self.lineProcessor.process(line, lineNumber)

            if processedLine.type 是 "empty" 或 "comment":
                lineIndex = lineIndex + 1
                继续

            if processedLine.type 是 "annotation":
                if pendingAnnotation 不为 null:
                    向 self.errorList 添加 "错误 (行 {lineNumber}): 不允许连续使用 @ 意图注释。"
                    // 这是一个简单错误，直接忽略旧的注释，采用新的。
                    pendingAnnotation = processedLine.content
                else:
                    pendingAnnotation = processedLine.content
                lineIndex = lineIndex + 1
                继续
            
            // 错误恢复辅助宏 (概念性)
            // 定义一个通用的错误处理和恢复流程，代替原有的 `返回 false`。
            define macro HANDLE_STRUCTURAL_ERROR(errorMessage):
                向 self.errorList 添加 errorMessage

                // 错误恢复核心逻辑: 寻找一个安全的同步点来恢复解析。
                // 同步点是缩进小于或等于当前父节点缩进的行，表明已退出错误代码块。
                var syncIndex = -1
                var recoveryScanIndex = lineIndex + 1
                while recoveryScanIndex < sourceLines.length():
                    var previewLine = self.lineProcessor.process(sourceLines[recoveryScanIndex], recoveryScanIndex + 1)
                    if previewLine.type != "empty" and previewLine.type != "comment":
                        if previewLine.indent <= currentNode.indent:
                            syncIndex = recoveryScanIndex
                            break
                    recoveryScanIndex = recoveryScanIndex + 1
                
                if syncIndex != -1:
                    lineIndex = syncIndex // 从同步点恢复解析
                else:
                    lineIndex = sourceLines.length() // 未找到，解析结束

                // 跳过当前主循环的剩余部分，从新的 lineIndex 开始下一次迭代。
                goto end_of_loop

            // 核心步骤 1: 根据缩进级别寻找正确的父节点
            while processedLine.indent < currentNode.indent:
                if currentNode.type 是 "class" 或 "func":
                    从 self.symbolTable 弹出当前作用域
                currentNode = currentNode.parent

            // 核心步骤 2: 验证缩进的正确性
            if processedLine.indent > currentNode.indent:
                if lastAddedNode.acceptsChildren == false:
                    HANDLE_STRUCTURAL_ERROR("错误 (行 {lineNumber}): 类型为 '{lastAddedNode.type}' 的节点下不应有任何子节点。")
                
                var expectedIndent = lastAddedNode.indent + 4
                if lastAddedNode.type 是 "root": expectedIndent = 0

                if processedLine.indent != expectedIndent:
                    HANDLE_STRUCTURAL_ERROR("缩进错误 (行 {lineNumber}): 期望缩进 {expectedIndent}，实际为 {processedLine.indent}。")
                
                currentNode = lastAddedNode

            else if processedLine.indent != currentNode.indent:
                HANDLE_STRUCTURAL_ERROR("缩进错误 (行 {lineNumber}): 存在非法的缩进回退。")
            
            // 核心步骤 3: 创建新节点
            var newNode = AstNodeFactory.createNode(processedLine, pendingAnnotation)
            if newNode 是 null:
                HANDLE_STRUCTURAL_ERROR("语法错误 (行 {lineNumber}): 无法识别的行或关键字: '{processedLine.content}'。")
            
            // 核心步骤 4: 即时语法验证
            if currentNode.canAddChild(newNode, lastAddedNode) == false:
                HANDLE_STRUCTURAL_ERROR("语法结构错误 (行 {lineNumber}): 类型为 '{newNode.type}' 的节点不能出现在 '{currentNode.type}' 节点内，或位置不正确。")
            
            // 核心步骤 5: 添加节点并更新状态
            currentNode.addChild(newNode)
            lastAddedNode = newNode
            pendingAnnotation = null

            // 核心步骤 6: 更新符号表和作用域
            if newNode 是一个定义了新作用域的节点 (如 ClassNode, FuncNode):
                self.symbolTable.pushScope(newNode.name)
            
            if newNode 是一个定义了符号的节点 (如 ClassNode, FuncNode, VarNode):
                var success = self.symbolTable.tryRegisterSymbol(newNode)
                if success == false:
                    // 注: 符号重定义是语义错误，不中断结构解析。只需记录并继续。
                    向 self.errorList 添加 "语义错误 (行 {lineNumber}): 符号 '{newNode.name}' 在当前作用域内已被定义。"

            lineIndex = lineIndex + 1
            label end_of_loop:
        
        // 重构: 解析结束后，根据 errorList 是否为空返回最终结果。
        返回 self.errorList 为空

    func getAst:
    description: 获取解析完成后生成的抽象语法树。
    output: self.astRoot

    func getErrors:
    description: 获取解析过程中收集到的所有错误信息。
    output: self.errorList


// -----------------------------------------------------------------
// 辅助类定义
// -----------------------------------------------------------------
// (LineProcessor, ProcessedLine, AstNodeFactory 等辅助类定义保持不变，此处省略以突出核心修改)
class LineProcessor:
    description: 负责将原始文本行转换为包含类型、缩进和内容的结构化对象。
    // ... 实现与原版相同 ...
class ProcessedLine:
    description: 存储单行代码经过预处理后的结构化信息。
    // ... 实现与原版相同 ...
class AstNodeFactory:
    description: 根据 ProcessedLine 创建相应类型的 AstNode 子类实例。
    // ... 实现与原版相同 ...

// --- AST 节点基类与子类 ---

class AstNode:
    description: AST 节点的基类，定义了所有节点的共同属性和接口。
    var nodeType: 字符串
    var content: 字符串
    var parent: AstNode
    var children: 列表[AstNode]
    var metadata: 字典 // 存储 @注释 和 description
    var indent: 整数
    var lineNumber: 整数
    var name: 字符串 // 对于定义符号的节点（类、函数、变量）
    var acceptsChildren: 布尔值 = true
    func addChild:
    input: childNode: AstNode
    behavior:
        将 childNode 添加到 self.children 列表
        设置 childNode.parent 为 self
    func canAddChild:
    description: 验证一个子节点是否可以被添加到当前节点下。这是实现语法约束的核心。
    input: childNode: AstNode, lastChild: AstNode
    output: 布尔值
    behavior:
        返回 false

class RootNode:
    inh AstNode
    description: AST的根节点，代表整个文件。
    func initialize:
    behavior:
        self.nodeType = "root"
        self.indent = -1
    func canAddChild:
    input: childNode: AstNode, lastChild: AstNode
    output: 布尔值
    behavior:
        if childNode.type 是 "module" 或 "class":
            返回 true
        else:
            返回 false

class ClassNode:
    inh AstNode
    description: 代表一个 class 声明。
    func initialize:
    behavior:
        self.nodeType = "class"

    func canAddChild:
    input: childNode: AstNode, lastChild: AstNode
    output: 布尔值
    behavior:
        // 重构: 更精确地约束 'description' 的位置。
        // description 必须紧密跟随它所描述的 class 本身、var 或 func。
        if childNode.type 是 "description":
            // `lastChild` 是上一个成功添加的节点。
            // 如果这是第一个子节点，`lastChild` 就是父节点 (ClassNode) 自身。
            if lastChild.type 是 "class" or lastChild.type 是 "var" or lastChild.type 是 "func":
                返回 true
            else:
                返回 false
        
        // inh 必须是第一个子节点 (或在可选的 class description 之后)。
        if childNode.type 是 "inh":
            // 检查已有的子节点，只允许 description 在 inh 之前。
            对 self.children 中的每个 c:
                if c.type 不是 "description":
                    返回 false // 如果已存在非 description 子节点，则 inh 无效
            返回 true

        // func 和 var 是 class 的合法成员。
        if childNode.type 是 "func" or childNode.type 是 "var":
            返回 true

        返回 false

class FuncNode:
    inh AstNode
    description: 代表一个 func 声明。
    // ... 实现与原版相同，逻辑已足够健壮 ...
    func canAddChild:
    input: childNode: AstNode, lastChild: AstNode
    output: 布尔值
    behavior:
        var seen = 创建一个字典来跟踪已见的关键字 (input, output, behavior)
        对 self.children 中的每个已有子节点:
            标记 seen[子节点.type] = true
        if childNode.type 是 "description":
            返回 self.children 为空
        if childNode.type 是 "input":
            返回 not seen["output"] and not seen["behavior"]
        if childNode.type 是 "output":
            返回 not seen["behavior"]
        if childNode.type 是 "behavior":
            返回 not seen["behavior"]
        返回 false

class BehaviorNode:
    inh AstNode
    description: 代表一个 behavior 块。
    // ... 实现与原版相同 ...
    func canAddChild:
    input: childNode: AstNode, lastChild: AstNode
    output: 布尔值
    behavior:
        var allowedTypes = ["statement", "if", "else"]
        if childNode.type 在 allowedTypes 中:
            if childNode.type 是 "else":
                返回 lastChild.type 是 "if"
            else:
                返回 true
        返回 false

class VarNode:
    inh AstNode
    description: 代表一个 var 声明。
    func initialize:
    behavior:
        self.nodeType = "var"
        self.acceptsChildren = false
    func canAddChild:
    input: childNode: AstNode, lastChild: AstNode
    output: 布尔值
    behavior:
        返回 false

// ... 其他节点类型 (InputNode, OutputNode, IfNode, ElseNode, StatementNode) 的定义保持不变 ...

// -----------------------------------------------------------------
// 符号表
// -----------------------------------------------------------------
// (SymbolTable 定义保持不变，其设计已足够模块化和健壮)
class SymbolTable:
    description: 符号表，用于管理作用域和符号定义，防止命名冲突。
    // ... 实现与原版相同 ...
```