# MCCP行为代码

## 模块：mccp_toolchain.mccp.symbols

### 概述
- 目的：管理项目的分布式符号表，这些表存储代码元素（类、函数、变量等）的结构化定义及其元数据。
- 职责：
    - 从多个分布式符号文件（`mccp_symbols_*.json`）中加载符号定义到内存中。
    - 将内存中的符号数据保存回对应的文件。
    - 提供方法以在所有加载的表中搜索特定符号。
    - 管理符号定义的创建、更新和合并，尊重“冻结”的符号。
    - 提供访问特定模块中定义的符号的权限。
- 交互：与`mccp.file_manager`交互以读取和写入符号文件，与`mccp.config`交互以定位符号目录。被`core.build`和`core.llm`（通过`PromptGenerator`）用于在转换过程中访问符号信息。使用`utils`模块进行搜索/数据处理。

### 组件

#### 类：SymbolTableManager
- 描述：管理整个项目的分布式符号表集合。在内存中持有符号数据，并协调持久化到文件系统。
- 行为：
    - 初始化（`__init__`）：
        - 目的：通过提供对文件和配置服务的访问并加载现有符号数据来准备符号管理器。
        - 过程：接收文件管理器和配置管理器的实例。在初始化时，通常触发从项目的符号目录中加载所有现有的符号表文件到内部数据结构中。
        - 依赖项：需要`mccp_toolchain.mccp.file_manager.FileManager`和`mccp_toolchain.mccp.config.ConfigManager`实例。
    - 加载所有符号表（`load_all_symbol_tables`）：
        - 目的：从项目指定的符号目录中读取所有符号定义文件（`mccp_symbols_*.json`），并将它们的内容存储在内存中。
        - 过程：使用文件管理器列出符号表根目录（从配置中获取）中的所有JSON文件。使用文件管理器读取每个文件的内容并解析JSON数据。将解析后的符号数据存储在内部字典或等效结构中，按模块或文件名组织。
        - 输入：项目根目录路径（`project_path`）。
    - 保存所有符号表（`save_all_symbol_tables`）：
        - 目的：将当前内存中所有符号表的状态持久化回文件系统中各自的JSON文件。
        - 过程：遍历持有符号数据的内部数据结构。对于每个对应于文件的符号集，生成其JSON字符串表示，并使用文件管理器将内容写回到原始文件路径。
    - 查找符号（`find_symbol`）：
        - 目的：在所有加载的符号表中搜索符号定义，按名称查找，可选地限制在特定模块中。
        - 过程：在内部符号数据结构中进行搜索。如果提供了`module_name`，则仅在该模块的符号中搜索。否则，在所有模块中搜索。如果找到，则返回符号数据字典。
        - 输入：要查找的符号名称（`symbol_name`）以及可选的模块名称以限制搜索范围（`module_name`）。
        - 输出：如果找到，则返回包含符号定义的字典，否则返回`None`。
        - 依赖项：可能使用`mccp_toolchain.utils`模块中的辅助函数进行搜索逻辑。
    - 更新符号（`update_symbol`）：
        - 目的：在适当模块的符号表中添加新的符号定义或修改现有的符号定义。
        - 过程：接收包含符号数据的字典，其中必须包括`name`和`module_name`。定位指定模块的符号表。如果符号已存在且其`is_frozen`属性为`true`，则拒绝更新。否则，添加或更新符号定义。修改内存中的数据。
        - 输入：包含要更新或添加的符号数据的字典（`symbol_data`）。
        - 输出：一个布尔值，指示更新是否成功（即，未被冻结符号阻止）。
    - 获取模块符号（`get_module_symbols`）：
        - 目的：检索属于特定模块的所有符号定义。
        - 过程：访问内部数据结构并返回与指定`module_name`关联的符号数据子集。
        - 输入：模块名称（`module_name`）。
        - 输出：包含该模块所有符号定义的字典或列表。

#### 类：Symbol
- 描述：表示存储在符号表中的单个符号定义的结构和属性。这是一个数据结构定义，而不是具有行为的活动组件。
- 属性：
    - 名称（`name`）：符号的唯一标识符（例如，类名、函数名）。
    - 类型（`type`）：对符号进行分类（例如，'class'、'function'、'variable'、'constant'）。
    - 描述（`description`）：对符号用途或功能的自然语言解释。
    - 模块名称（`module_name`）：符号所属模块的点分名称（例如，'mccp_toolchain.ui'）。
    - 依赖项（`dependencies`）：该符号依赖的其他符号或模块的名称列表。
    - 是否冻结（`is_frozen`）：一个布尔标志，指示该符号的定义（或由其生成的代码）是否受自动化工具（如LLM）的修改保护。