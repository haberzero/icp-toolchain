# MCCP行为代码

## 模块：mccp_toolchain.core.build

### 概述
- 目的：管理并协调MCCP工具链中的核心转换过程，促进信息在不同架构层之间的流动以及代码生成。
- 职责：
    - 定义并管理从需求到行为代码、伪代码再到目标代码的正向构建过程步骤。
    - 定义并管理从目标代码到伪代码、行为代码再到需求的反向构建过程步骤。
    - 协调在每个转换步骤中使用各种服务（文件管理器、符号管理器、配置管理器、LLM客户端、解析器）。
    - 执行特定层的转换。
- 交互：与`mccp.config`交互以获取构建规则和层映射，与`mccp.file_manager`交互以访问文件，与`mccp.symbols`交互以管理符号，与`core.llm`交互以实现AI驱动的转换，与`mccp.parsers`交互以解析和生成内容。

### 组件

#### 类：BuildOrchestrator
- 描述：作为构建操作的中央控制器。它定义了从一层到另一层所需的转换序列，并确保每个步骤正确执行，协调其他模块的活动。
- 行为：
    - 初始化（`__init__`）：
        - 目的：配置协调器，使其能够访问执行构建步骤所需的所有必要服务。
        - 过程：接收配置、文件、符号、LLM等核心管理器和客户端的实例以及一系列解析器实例。存储这些引用，以便在协调构建任务时使用。
        - 依赖项：需要`mccp_toolchain.mccp.config.ConfigManager`、`mccp_toolchain.mccp.file_manager.FileManager`、`mccp_toolchain.mccp.symbols.SymbolTableManager`、`mccp_toolchain.core.llm.LLMClient`以及一系列`mccp_toolchain.mccp.parsers`实例。
    - 运行正向构建（`run_forward_build`）：
        - 目的：执行从高层到低层的结构化转换序列，通常从需求或行为代码开始，向目标代码移动。
        - 过程：根据指定的起始层和结束层以及配置的构建规则，确定必要的中间步骤。对于每一步（例如`.mcbc`到`.mcpc`），它识别相关的输入文件、输出文件、构建规则和必要的服务（解析器、LLM）。然后将每个文件的实际转换委托给`LayerTransformer`实例。管理整个流程，包括在步骤之间按需加载/保存符号和配置。报告整个过程的成功或失败。
        - 输入：项目根路径（`project_path`）、起始层标识符（`start_layer`）和结束层标识符（`end_layer`）。
        - 输出：一个布尔值，指示构建过程是否成功完成。
        - 交互：协调多次调用`mccp_toolchain.core.build.LayerTransformer`，并可能涉及文件/符号管理操作。
    - 运行反向构建（`run_reverse_build`）：
        - 目的：执行从低层到高层的转换序列，通常从目标代码开始，向行为代码或需求移动。（注意：在符号中被标记为冻结/待实现）。
        - 过程：（计划中）类似于正向构建，但遵循反向的层序列。识别必要的步骤（例如目标代码到`.mcpc`，`.mcpc`到`.mcbc`）。将转换委托给`LayerTransformer`实例。根据反向工程的见解协调文件和符号管理更新。报告成功或失败。
        - 输入：项目根路径（`project_path`）、起始层标识符（`start_layer`）和结束层标识符（`end_layer`）。
        - 输出：一个布尔值，指示反向构建过程是否成功完成（待实现）。
        - 交互：（计划中）协调调用`mccp_toolchain.core.build.LayerTransformer`和文件/符号管理操作，专注于提取结构和含义。

#### 类：LayerTransformer
- 描述：执行从一个层的单个源文件到另一个层的目标文件的内容转换任务，通常涉及LLM调用。
- 行为：
    - 初始化（`__init__`）：
        - 目的：为特定的层到层转换设置转换器，配置所需的特定服务和解析器。
        - 过程：接收配置、文件、符号和LLM客户端的实例，以及源文件和目标文件格式的特定解析器。存储这些引用。
        - 依赖项：需要`mccp_toolchain.mccp.config.ConfigManager`、`mccp_toolchain.mccp.file_manager.FileManager`、`mccp_toolchain.mccp.symbols.SymbolTableManager`、`mccp_toolchain.core.llm.LLMClient`以及适当的解析器实例（来自`mccp_toolchain.mccp.parsers`）。
    - 转换（`transform`）：
        - 目的：执行从读取源文件、准备上下文、调用LLM进行转换、处理LLM的响应、可能更新符号，到将结果写入目标文件的完整过程。
        - 过程：使用文件管理器读取`source_file_path`。使用配置管理器的配置规则键获取LLM提示指令、输入/输出格式等。从符号管理器检索相关符号数据。构建包含源内容、符号、配置和格式要求的详细提示。使用提示和上下文调用LLM客户端的`generate_content`方法。接收并可能解析LLM的响应。根据LLM请求或从生成内容推断的更改更新符号表管理器（尊重`is_frozen`）。使用文件管理器将生成的内容写入`target_file_path`。报告转换的成功或失败。
        - 输入：源文件路径（`source_file_path`）和目标文件路径（`target_file_path`），以及识别配置中特定构建规则的键（`build_rule_key`）。
        - 输出：一个布尔值，指示转换是否成功。
        - 交互：协调调用`file_manager`（读/写）、`config_manager`（获取规则）、`symbol_manager`（获取/更新符号）、`llm_client`（生成/解析）以及可能的`parsers`（用于源/目标内容处理）。

### 常量

#### 常量：BUILD_LAYERS
- 描述：定义构建系统识别的不同架构层的序列和映射（例如，需求、行为代码、伪代码、目标代码）。
- 用途：由`BuildOrchestrator`使用，以了解正向和反向构建过程中的流程并识别中间步骤。
- 关联：直接对应于`mccp_config.json`中的`layer_mapping`部分。

#### 常量：BUILD_RULES
- 描述：定义用于识别配置中特定转换规则的键（例如，`md_to_mcbc`、`mcbc_to_mcpc`、`mcpc_to_py`）。
- 用途：由`BuildOrchestrator`和`LayerTransformer`使用，以从`mccp_config.json`中查找给定转换步骤的正确提示、输入/输出扩展和其他设置。
- 关联：直接对应于`mccp_config.json`中的`build_rules`和`reverse_build_rules`部分的键。