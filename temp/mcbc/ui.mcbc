# MCCP行为代码

## 模块：mccp_toolchain.ui

### 概述
- 目的：为mccp-toolchain提供图形用户界面，实现用户交互以及项目状态的可视化。
- 职责：
    - 显示项目的文件结构。
    - 捕获用户对项目管理（新建、打开）和构建过程的命令。
    - 向用户呈现反馈、进度、错误和警告。
    - 与核心后端服务集成以执行操作。
- 交互：主要与`core.build`交互以触发转换操作，与`mccp.file_manager`交互以实现项目文件系统的表示和管理。

### 组件

#### 类：MainWindow
- 描述：主应用程序窗口组件，作为用户界面和交互点的中心枢纽。继承自标准窗口类（例如PyQt QMainWindow）。
- 行为：
    - 初始化（`__init__`）：
        - 目的：建立主窗口的基础状态，并注入核心系统所需的依赖项。
        - 过程：设置初始窗口属性。接收并存储核心协调器和文件管理服务的实例。准备用户界面结构，但不一定立即用数据填充。
        - 依赖项：依赖于外部提供的`mccp_toolchain.core.build.BuildOrchestrator`和`mccp_toolchain.mccp.file_manager.FileManager`实例。
    - 设置用户界面（`setup_ui`）：
        - 目的：构建并排列主窗口内组成用户界面的所有可视元素。
        - 过程：创建用户界面控件，如文件树视图区域、菜单栏、工具栏、操作按钮以及状态或日志显示区域。使用UI框架（PyQt）配置它们的布局和外观。
        - 输出：一个完全布局但尚未启用（信号连接）的用户界面。
        - 依赖项：使用PyQt5框架的组件（`PyQt5.QtWidgets`、`PyQt5.QtGui`、`PyQt5.QtCore`）。
    - 连接信号（`connect_signals`）：
        - 目的：将用户界面控件（如按钮点击或菜单选择）生成的事件与相应的内部方法连接，以处理这些操作。
        - 过程：建立UI框架信号/槽机制所需的连接。将特定信号（例如按钮的`clicked`）映射到此类中的指定处理方法。
        - 交互：此步骤使用户界面能够触发由其他核心模块管理的操作，例如启动构建或管理文件。
    - 更新文件树（`update_file_tree`）：
        - 目的：刷新并用指定项目目录的当前内容填充文件结构树视图。
        - 过程：配置文件系统模型以指向项目的根目录。将此模型与树视图控件关联，以动态显示目录和文件层次结构。
        - 输入：当前打开项目的根目录的绝对路径（`project_root`）。
        - 输出：在用户界面中显示的项目文件系统结构的可视化表示。
        - 依赖项：特别使用`PyQt5.QtWidgets.QFileSystemModel`与文件系统交互。
    - 记录消息（`log_message`）：
        - 目的：向用户提供有关工具链正在进行的操作、状态更新或遇到的问题的文本反馈。
        - 过程：接收消息字符串，并在用户界面的指定区域显示，例如窗口底部的状态栏或专用日志面板。
        - 输入：要显示的消息字符串（`message`）。
    - 处理新建项目（`handle_new_project`）：
        - 目的：响应用户创建新MCCP项目的意图。
        - 过程：通常涉及通过对话框提示用户输入项目名称和位置等详细信息。将实际创建项目标准目录结构和初始配置文件的任务委托给文件管理服务。在成功创建后更新用户界面以显示新项目。
        - 交互：在注入的`FileManager`实例上启动`create_project_structure`操作。
    - 处理打开项目（`handle_open_project`）：
        - 目的：响应用户打开现有MCCP项目的意图。
        - 过程：提供文件选择对话框，让用户选择项目的根目录。选择后，指示文件管理器加载项目特定数据（如配置和符号），并更新文件树视图以显示打开的项目结构。
        - 交互：与`FileManager`交互（例如`get_project_root_from_path`，可能通过管理器触发配置和符号加载），并使用UI框架的文件对话框。
    - 处理运行构建（`handle_run_build`）：
        - 目的：响应用户执行MCCP层之间的构建或转换过程的命令。
        - 过程：根据UI上下文或用户选择确定期望的转换目标层（例如，从需求到行为代码，或从伪代码到目标代码）。将此过程的复杂协调任务委托给构建协调器服务。通过日志记录在构建过程中向用户提供反馈。
        - 输入：指定构建过程目标层的标识符（`target_layer`）。
        - 交互：调用注入的`BuildOrchestrator`实例的`run_forward_build`方法。