file: mcbc_data_type.py, data_type.py ——
"""
1.  lib中进行data_type管理，现在各个函数的返回值指示乱七八糟，全是各种字典 optional的嵌套，很难看。
    而且我其实不喜欢python的返回类型注释，很难读
"""



file: lines_parser ——
"""
1.  在未来 expected_next_type这个属性应该进行一定的重构，现在这种状态属于纯手动维护，必然会为未来开发带来困难。
    更主要的一点在于，对于不同的target lang来说，语法行为应该有不同的限制。比如python允许函数和类的嵌套定义，但C中不会进行函数的嵌套
    目前的困难是：mccp不是编程语言，目前看下来也不太适合去编写“上下文无关文法（CFG）”。我需要考虑其他的合理通用方法。字典/列表 是权宜之计

2.  现在lines_parser构建出来的node完全以行号作为索引，现在只是为了方便起见快速实现这么干，实际上这种搞法在未来隐患巨大
    比如说我期望实现的是，在特定代码改动后，相关的代码被rebuild，其他部分不被送进llm，以行号为索引是做不到的
    目前期望的思路：
        节点编号结合hash，比如同级节点之间顺序编号或者纯增量uid编号，再结合内容hash，那么通过树形节点编号索引，就不怕行号变化
        除此之外，树形结构还有利于在特定代码改动后仅rebuild相关节点树（rebuild整个文件代价太大，这毕竟是llm计算）

3.  还是以前记录过的，也许Scons这种相对新，基于python的构建工具可以帮到我。但是优先级不高，暂时作为备忘

4.  data_type需要把现在node info做成class形式。现在属于纯原生字典+str_key手动管理，非常不利于重构，隐患巨大。
    未来如果要针对不同的target，就可以针对node info的class进行针对性处理，有利于未来扩展
    现在暂时不处理，精力集中于python，集中于第一次自举
"""



file: ast_builder ——
"""
# 未来会给接口定义做特殊处理，避免频繁书写begin以及pass，凭空占用行数量而且没有实际有效信息
"""

